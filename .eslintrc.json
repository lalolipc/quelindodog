{
    "root": true,
    "parser": "@typescript-eslint/parser", // the TypeScript parser we installed earlier
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "node": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:jsx-a11y/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@typescript-eslint/eslint-recommended", // eslint TypeScript rules (github.com/typescript-eslint/typescript-eslint)
        "plugin:@typescript-eslint/recommended"
    ],
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly",
        "React": "writable"
    },
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true,
            "arrowFunctions": true
        },
        "ecmaVersion": 2018,
        "sourceType": "module"
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "plugins": [
        "react",
        "react-hooks"
    ],
    "rules": {
        "indent": [
            1,
            4,
            {
                "SwitchCase": 1
                // "ignoredNodes": [
                //     "JSXElement *"
                // ]
            }
        ],
        "quotes": [
            "warn",
            "single"
        ],
        "semi": [
            "warn",
            "always"
        ],
        "comma-spacing": [
            "warn",
            {
                "before": false,
                "after": true
            }
        ],
        "space-infix-ops": 2,
        "space-in-parens": [
            1,
            "always",
            {
                "exceptions": [
                    "empty"
                ]
            }
        ],
        "array-bracket-spacing": [
            "warn",
            "always"
        ],
        "object-curly-spacing": [
            "warn",
            "always"
        ],
        "block-spacing": "warn",
        "arrow-spacing": "warn",
        "space-before-function-paren": "warn",
        "keyword-spacing": [
            "warn",
            {
                "before": true
            }
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "eol-last": [
            "error",
            "always"
        ],
        "spaced-comment": [
            "error",
            "always"
        ],
        "brace-style": [
            "error",
            "allman"
            // { "allowSingleLine": true }
        ],
        "prefer-const": [
            "warn"
        ],
        "max-len": [
            "error",
            {
                "ignoreStrings": true,
                "ignoreRegExpLiterals": true,
                "code": 200
            }
        ],
        "no-shadow-restricted-names": "error",
        "no-sequences": "error",
        "no-new-wrappers": "error",
        "no-multiple-empty-lines": "warn",
        "no-eval": "error",
        "no-fallthrough": "warn",
        "no-invalid-this": "off",
        "no-cond-assign": "error",
        "no-duplicate-case": "error",
        "no-empty": "off",
        "no-caller": "error",
        "new-parens": "error",
        "max-lines": [
            "warn",
            600
        ],
        "no-trailing-spaces": [
            "warn",
            {
                "ignoreComments": false,
                "skipBlankLines": false
            }
        ],
        "no-unused-vars": "off",
        "no-prototype-builtins": "warn",
        "comma-dangle": [
            "error",
            {
                "arrays": "never",
                "objects": "never",
                "imports": "never",
                "exports": "never",
                "functions": "never"
            }
        ],
        "no-console": 1,
        "prefer-template": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "object-shorthand": "warn",
        "one-var": [
            "warn",
            "never"
        ],
        "prefer-object-spread": "error",
        "quote-props": [
            "error",
            "consistent-as-needed"
        ],
        "radix": "error",
        "curly": "warn",
        "use-isnan": "error",
        "no-empty-function": "off",
        "@typescript-eslint/indent": ["warn"],
        "@typescript-eslint/no-empty-function": [
            "warn",
            { "allow": ["arrowFunctions"] }
        ],
        "double": 0,
        "import/no-unresolved": "off",
        "react/display-name": "off",
        "react/prop-types": "off", // We turn off prop-types rule, as we will use TypeScript's types instead.
        "react/react-in-jsx-scope": "off",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/explicit-module-boundary-types": 0,
        "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx",".ts", ".tsx"] }],
        "jsx-a11y/anchor-is-valid": [
        "error",
        {
        "components": ["Link"],
        "specialLink": ["hrefLeft", "hrefRight"],
        "aspects": ["invalidHref", "preferButton"]
        }
        ],
        "@typescript-eslint/no-var-requires": "off",
        "no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-unused-vars": "off"
    }
}
